/* B2u3;  out[0] = !in[2]&!in[1]&!in[0]
          out[1] = !in[2]&!in[1]& in[0]
		  out[2] = !in[2]& in[1]&!in[0]
		  out[3] = !in[2]& in[1]& in[0]
		  out[0] =  in[2]&!in[1]&!in[0]
          out[1] =  in[2]&!in[1]& in[0]
		  out[2] =  in[2]& in[1]&!in[0]
		  out[3] =  in[2]& in[1]& in[0]
		  
		  out = 2 hoch in 
*/
CHIP B2u3{

IN in[3];
OUT out[8];

PARTS:

Not(in=in[0], out=notin0);
Not(in=in[1], out=notin1);
Not(in=in[2], out=notin2);

And(a=notin1,b=notin0,out=notin1andnotin0);
And(a=notin1,b=in[0],out=notin1andin0);
And(a=in[1], b=notin0,out=in1andnotin0);
And(a=in[1],b=in[0],out=in1andin0);

//out[0] = !in[2]&!in[1]&!in[0]
And(a=notin2,b=notin1andnotin0,out=out[0]);
//out[1] = !in[2]&!in[1]& in[0]
And(a=notin2,b=notin1andin0,out=out[1]);
//out[2] = !in[2]& in[1]&!in[0]
And(a=notin2,b=in1andnotin0,out=out[2]);
//out[3] = !in[2]& in[1]& in[0]
And(a=notin2,b=in1andin0,out=out[3]);
//out[0] =  in[2]&!in[1]&!in[0]
And(a=in[2],b=notin1andnotin0,out=out[4]);
//out[1] =  in[2]&!in[1]& in[0]
And(a=in[2],b=notin1andin0,out=out[5]);
//out[2] =  in[2]& in[1]&!in[0]
And(a=in[2],b=in1andnotin0,out=out[6]);
//out[3] =  in[2]& in[1]& in[0]
And(a=in[2],b=in1andin0,out=out[7]);
}